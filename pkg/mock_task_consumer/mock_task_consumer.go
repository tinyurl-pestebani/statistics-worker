// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/task_consumer/task_consumer.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/task_consumer/task_consumer.go -destination=./pkg/mock_task_consumer/mock_task_consumer.go
//

// Package mock_task_consumer is a generated GoMock package.
package mock_task_consumer

import (
	context "context"
	reflect "reflect"

	_go "github.com/tinyurl-pestebani/go-proto-pkg/pkg/pb/v1"
	task_consumer "github.com/tinyurl-pestebani/statistics-worker/pkg/task_consumer"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskMessage is a mock of TaskMessage interface.
type MockTaskMessage struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMessageMockRecorder
	isgomock struct{}
}

// MockTaskMessageMockRecorder is the mock recorder for MockTaskMessage.
type MockTaskMessageMockRecorder struct {
	mock *MockTaskMessage
}

// NewMockTaskMessage creates a new mock instance.
func NewMockTaskMessage(ctrl *gomock.Controller) *MockTaskMessage {
	mock := &MockTaskMessage{ctrl: ctrl}
	mock.recorder = &MockTaskMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskMessage) EXPECT() *MockTaskMessageMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTaskMessage) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTaskMessageMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTaskMessage)(nil).Commit))
}

// GetTask mocks base method.
func (m *MockTaskMessage) GetTask() (*_go.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask")
	ret0, _ := ret[0].(*_go.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTaskMessageMockRecorder) GetTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTaskMessage)(nil).GetTask))
}

// MockTaskConsumer is a mock of TaskConsumer interface.
type MockTaskConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockTaskConsumerMockRecorder
	isgomock struct{}
}

// MockTaskConsumerMockRecorder is the mock recorder for MockTaskConsumer.
type MockTaskConsumerMockRecorder struct {
	mock *MockTaskConsumer
}

// NewMockTaskConsumer creates a new mock instance.
func NewMockTaskConsumer(ctrl *gomock.Controller) *MockTaskConsumer {
	mock := &MockTaskConsumer{ctrl: ctrl}
	mock.recorder = &MockTaskConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskConsumer) EXPECT() *MockTaskConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTaskConsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTaskConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTaskConsumer)(nil).Close))
}

// PollMessage mocks base method.
func (m *MockTaskConsumer) PollMessage(ctx context.Context) (task_consumer.TaskMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollMessage", ctx)
	ret0, _ := ret[0].(task_consumer.TaskMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PollMessage indicates an expected call of PollMessage.
func (mr *MockTaskConsumerMockRecorder) PollMessage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollMessage", reflect.TypeOf((*MockTaskConsumer)(nil).PollMessage), ctx)
}
